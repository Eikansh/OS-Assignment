From faa34c31765b6a8925018d3999d14475ba8ab431 Mon Sep 17 00:00:00 2001
From: Eikansh Gupta <eikanshgupta@gmail.com>
Date: Thu, 25 Mar 2021 17:47:29 +0530
Subject: [PATCH 1/5] Implemented null syscall

---
 Makefile                               | 2 +-
 arch/x86/entry/syscalls/syscall_64.tbl | 1 +
 ballooning/Makefile                    | 1 +
 ballooning/ballooning.c                | 9 +++++++++
 include/linux/syscalls.h               | 1 +
 5 files changed, 13 insertions(+), 1 deletion(-)
 create mode 100644 ballooning/Makefile
 create mode 100644 ballooning/ballooning.c

diff --git a/Makefile b/Makefile
index 1673c12fb..308fdded5 100644
--- a/Makefile
+++ b/Makefile
@@ -1097,7 +1097,7 @@ export MODORDER := $(extmod-prefix)modules.order
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ ballooning/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 78672124d..618a49543 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -363,6 +363,7 @@
 439	common	faccessat2		sys_faccessat2
 440	common	process_madvise		sys_process_madvise
 441	common	epoll_pwait2		sys_epoll_pwait2
+442 common  ballooning    sys_ballooning
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff --git a/ballooning/Makefile b/ballooning/Makefile
new file mode 100644
index 000000000..c09834408
--- /dev/null
+++ b/ballooning/Makefile
@@ -0,0 +1 @@
+obj-y := ballooning.o
diff --git a/ballooning/ballooning.c b/ballooning/ballooning.c
new file mode 100644
index 000000000..9ac220386
--- /dev/null
+++ b/ballooning/ballooning.c
@@ -0,0 +1,9 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+
+SYSCALL_DEFINE0(ballooning)
+
+{
+  printk("In ballooning syscall\n");
+  return 0;
+}
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 7688bc983..ee8c32dec 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1364,4 +1364,5 @@ int __sys_getsockopt(int fd, int level, int optname, char __user *optval,
 		int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
+asmlinkage long sys_ballooning(void);
 #endif
-- 
2.25.1


From 7dc7c25c5f8997b48954704f2f846385f3d565f4 Mon Sep 17 00:00:00 2001
From: Eikansh Gupta <eikanshgupta@gmail.com>
Date: Wed, 7 Apr 2021 19:39:10 +0530
Subject: [PATCH 2/5] Implemented signal daemon

---
 ballooning/ballooning.c | 58 ++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 57 insertions(+), 1 deletion(-)

diff --git a/ballooning/ballooning.c b/ballooning/ballooning.c
index 9ac220386..fb4b0bcbb 100644
--- a/ballooning/ballooning.c
+++ b/ballooning/ballooning.c
@@ -1,9 +1,65 @@
 #include <linux/kernel.h>
 #include <linux/syscalls.h>
+#include <linux/delay.h>
+#include <linux/completion.h>
 
-SYSCALL_DEFINE0(ballooning)
+#define SIGBALLOON 60
+#define MEMUPLIMIT 1000000000UL
+
+struct ballooning_user {
+  struct task_struct *t;
+	struct kernel_siginfo info;
+}b_users;
+
+static DECLARE_COMPLETION(thread_done);
+struct task_struct *kthread;
+
+int send_sigballoon(void)
+{
+  if(send_sig_info(SIGBALLOON, &b_users.info, b_users.t) < 0)
+    return -1;
+  return 0;
+}
 
+int check_memd(void *unused)
 {
+  unsigned long avail_mem;
+  printk("In check_memd");
+  for(;;)
+  {
+    avail_mem = si_mem_available();
+    printk("Mem %ld\n", avail_mem);
+    if(avail_mem < MEMUPLIMIT)
+    {
+      //Assuming send_sigballoon will cause error if the process exit
+      //and signal not send.
+      if(send_sigballoon() < 0)
+        goto exit;
+    }
+    msleep(10000);
+  }
+exit:
+  complete_and_exit(&thread_done, 0);
+}
+
+SYSCALL_DEFINE0(ballooning)
+{
+  int ret =0;
+  char * swapfilename = "/swapfile";
+  sys_swapoff(swapfilename);
   printk("In ballooning syscall\n");
+
+	clear_siginfo(&b_users.info);
+	b_users.info.si_signo = SIGBALLOON;
+	b_users.info.si_errno = 0;
+	b_users.info.si_code = SI_KERNEL;
+  b_users.t = current;
+
+  kthread = kthread_run(check_memd, NULL, "check_memd");
+  if (IS_ERR(kthread)) {
+    ret = PTR_ERR(kthread);
+    printk("Unable to run kthread err %d\n", ret);
+    return ret;
+  }
   return 0;
 }
-- 
2.25.1


From 9db1c8022f86ce14ee44b63301f477a29a0f5fa5 Mon Sep 17 00:00:00 2001
From: Eikansh Gupta <eikanshgupta@gmail.com>
Date: Sat, 10 Apr 2021 21:09:45 +0530
Subject: [PATCH 3/5] os assignment 1

---
 ballooning/ballooning.c | 117 +++++++++++++++++++++++++++++++++++++---
 1 file changed, 111 insertions(+), 6 deletions(-)

diff --git a/ballooning/ballooning.c b/ballooning/ballooning.c
index fb4b0bcbb..0849b0a97 100644
--- a/ballooning/ballooning.c
+++ b/ballooning/ballooning.c
@@ -2,6 +2,8 @@
 #include <linux/syscalls.h>
 #include <linux/delay.h>
 #include <linux/completion.h>
+#include <linux/hugetlb.h>
+#include <linux/mempolicy.h>
 
 #define SIGBALLOON 60
 #define MEMUPLIMIT 1000000000UL
@@ -21,14 +23,15 @@ int send_sigballoon(void)
   return 0;
 }
 
+// Daemon which runs when a application is registered
+// It checks if memory is less than 1 GB 
+// and send signal to application.
 int check_memd(void *unused)
 {
   unsigned long avail_mem;
-  printk("In check_memd");
   for(;;)
   {
     avail_mem = si_mem_available();
-    printk("Mem %ld\n", avail_mem);
     if(avail_mem < MEMUPLIMIT)
     {
       //Assuming send_sigballoon will cause error if the process exit
@@ -42,19 +45,121 @@ int check_memd(void *unused)
   complete_and_exit(&thread_done, 0);
 }
 
+// Copy of mlock_fixup() in mlock.c
+static int b_mlock_fixup(struct vm_area_struct *vma, struct vm_area_struct **prev,
+	unsigned long start, unsigned long end, vm_flags_t newflags)
+{
+	struct mm_struct *mm = vma->vm_mm;
+	pgoff_t pgoff;
+	int nr_pages;
+	int ret = 0;
+	int lock = !!(newflags & VM_LOCKED);
+	vm_flags_t old_flags = vma->vm_flags;
+
+	if (newflags == vma->vm_flags || (vma->vm_flags & VM_SPECIAL) ||
+	    is_vm_hugetlb_page(vma) || vma == get_gate_vma(current->mm) ||
+	    vma_is_dax(vma))
+		/* don't set VM_LOCKED or VM_LOCKONFAULT and don't count */
+		goto out;
+
+	pgoff = vma->vm_pgoff + ((start - vma->vm_start) >> PAGE_SHIFT);
+	*prev = vma_merge(mm, *prev, start, end, newflags, vma->anon_vma,
+			  vma->vm_file, pgoff, vma_policy(vma),
+			  vma->vm_userfaultfd_ctx);
+	if (*prev) {
+		vma = *prev;
+		goto success;
+	}
+
+	if (start != vma->vm_start) {
+		ret = split_vma(mm, vma, start, 1);
+		if (ret)
+			goto out;
+	}
+
+	if (end != vma->vm_end) {
+		ret = split_vma(mm, vma, end, 0);
+		if (ret)
+			goto out;
+	}
+
+success:
+	/*
+	 * Keep track of amount of locked VM.
+	 */
+	nr_pages = (end - start) >> PAGE_SHIFT;
+	if (!lock)
+		nr_pages = -nr_pages;
+	else if (old_flags & VM_LOCKED)
+		nr_pages = 0;
+	mm->locked_vm += nr_pages;
+
+	/*
+	 * vm_flags is protected by the mmap_lock held in write mode.
+	 * It's okay if try_to_unmap_one unmaps a page just after we
+	 * set VM_LOCKED, populate_vma_page_range will bring it back.
+	 */
+
+	if (lock)
+		vma->vm_flags = newflags;
+
+out:
+	*prev = vma;
+	return ret;
+}
+
+// This function locks all the pages of all applications into memory.
+// It leaves only the application which calls SIGBALLOON 
+// It is similar to apply_mlockall_flags()
+static int b_mlockall(void)
+{
+  struct task_struct *p;
+	struct vm_area_struct * vma, * prev = NULL;
+  for_each_process(p)
+  {
+    if(p->mm)
+    {
+      if(p->pid != current->pid)
+      {
+        if (mmap_write_lock_killable(p->mm))
+          return -EINTR;
+        p->mm->def_flags &= VM_LOCKED_CLEAR_MASK;
+        p->mm->def_flags |= VM_LOCKED;
+        p->mm->def_flags |= VM_LOCKONFAULT;
+        for (vma = p->mm->mmap; vma ; vma = prev->vm_next) {
+          vm_flags_t newflags;
+
+          newflags = vma->vm_flags & VM_LOCKED_CLEAR_MASK;
+          newflags |= VM_LOCKED;
+
+          /* Ignore errors */
+          b_mlock_fixup(vma, &prev, vma->vm_start, vma->vm_end, newflags);
+          cond_resched();
+        }
+        mmap_write_unlock(p->mm);
+      }
+      else
+        p->mm->def_flags &= VM_LOCKED_CLEAR_MASK;
+    }
+  }
+  return 0;
+}
+
 SYSCALL_DEFINE0(ballooning)
 {
-  int ret =0;
-  char * swapfilename = "/swapfile";
-  sys_swapoff(swapfilename);
-  printk("In ballooning syscall\n");
+  int ret = 0;
 
+  //Locking all the pages
+  ret = b_mlockall();
+  if(ret != 0)
+    printk("Unable to lock all pages\n");
 	clear_siginfo(&b_users.info);
 	b_users.info.si_signo = SIGBALLOON;
 	b_users.info.si_errno = 0;
 	b_users.info.si_code = SI_KERNEL;
   b_users.t = current;
 
+  //Running the daemon
   kthread = kthread_run(check_memd, NULL, "check_memd");
   if (IS_ERR(kthread)) {
     ret = PTR_ERR(kthread);
-- 
2.25.1


From 4f2d6071f0e9b53d892fe51bb72eb76423eef16f Mon Sep 17 00:00:00 2001
From: Eikansh Gupta <eikanshgupta@gmail.com>
Date: Sat, 10 Apr 2021 21:32:38 +0530
Subject: [PATCH 4/5] os assignment-1

Signed-off-by: Eikansh Gupta <eikanshgupta@gmail.com>
---
 ballooning/ballooning.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/ballooning/ballooning.c b/ballooning/ballooning.c
index 0849b0a97..8706f82c7 100644
--- a/ballooning/ballooning.c
+++ b/ballooning/ballooning.c
@@ -24,7 +24,7 @@ int send_sigballoon(void)
 }
 
 // Daemon which runs when a application is registered
-// It checks if memory is less than 1 GB 
+// It checks if memory is less than 1 GB
 // and send signal to application.
 int check_memd(void *unused)
 {
@@ -109,7 +109,7 @@ static int b_mlock_fixup(struct vm_area_struct *vma, struct vm_area_struct **pre
 }
 
 // This function locks all the pages of all applications into memory.
-// It leaves only the application which calls SIGBALLOON 
+// It leaves only the application which calls SIGBALLOON
 // It is similar to apply_mlockall_flags()
 static int b_mlockall(void)
 {
-- 
2.25.1


From c4e49c58d638db87f341788d95dce8d110656888 Mon Sep 17 00:00:00 2001
From: Eikansh Gupta <eikanshgupta@gmail.com>
Date: Thu, 13 May 2021 22:16:02 +0530
Subject: [PATCH 5/5] Implemented bswap syscall

---
 arch/x86/entry/syscalls/syscall_64.tbl |  1 +
 ballooning/ballooning.c                | 44 ++++++++++++++++++++++----
 include/linux/syscalls.h               |  1 +
 3 files changed, 40 insertions(+), 6 deletions(-)

diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 618a49543..7a7f24fa2 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -364,6 +364,7 @@
 440	common	process_madvise		sys_process_madvise
 441	common	epoll_pwait2		sys_epoll_pwait2
 442 common  ballooning    sys_ballooning
+443 common  bswap     sys_bswap
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff --git a/ballooning/ballooning.c b/ballooning/ballooning.c
index 8706f82c7..7c2aee9e6 100644
--- a/ballooning/ballooning.c
+++ b/ballooning/ballooning.c
@@ -4,13 +4,17 @@
 #include <linux/completion.h>
 #include <linux/hugetlb.h>
 #include <linux/mempolicy.h>
+#include <../mm/internal.h>
+#include <linux/page_idle.h>
 
 #define SIGBALLOON 60
 #define MEMUPLIMIT 1000000000UL
 
+extern unsigned long reclaim_pages(struct list_head *page_list);
+
 struct ballooning_user {
   struct task_struct *t;
-	struct kernel_siginfo info;
+  struct kernel_siginfo info;
 }b_users;
 
 static DECLARE_COMPLETION(thread_done);
@@ -114,7 +118,7 @@ static int b_mlock_fixup(struct vm_area_struct *vma, struct vm_area_struct **pre
 static int b_mlockall(void)
 {
   struct task_struct *p;
-	struct vm_area_struct * vma, * prev = NULL;
+  struct vm_area_struct * vma, * prev = NULL;
   for_each_process(p)
   {
     if(p->mm)
@@ -153,10 +157,10 @@ SYSCALL_DEFINE0(ballooning)
   ret = b_mlockall();
   if(ret != 0)
     printk("Unable to lock all pages\n");
-	clear_siginfo(&b_users.info);
-	b_users.info.si_signo = SIGBALLOON;
-	b_users.info.si_errno = 0;
-	b_users.info.si_code = SI_KERNEL;
+  clear_siginfo(&b_users.info);
+  b_users.info.si_signo = SIGBALLOON;
+  b_users.info.si_errno = 0;
+  b_users.info.si_code = SI_KERNEL;
   b_users.t = current;
 
   //Running the daemon
@@ -168,3 +172,31 @@ SYSCALL_DEFINE0(ballooning)
   }
   return 0;
 }
+
+SYSCALL_DEFINE2(bswap, void __user *, args, unsigned int, nr_args)
+{
+  unsigned long long __user *swap_list;
+  unsigned int i, nr_reclaimed=0;
+  unsigned long long pfn;
+	struct page *page = NULL;
+	LIST_HEAD(page_list);
+
+  swap_list = (unsigned long long*) args;
+
+  for(i=0; i<nr_args; i++)
+  {
+    if (copy_from_user(&pfn, &swap_list[i], sizeof(pfn)))
+      return -EFAULT;
+    page = pfn_to_page(pfn);
+
+    // This code is referenced from function madvise_cold_or_pageout_pte_range
+    // defined in madvise.c
+    ClearPageReferenced(page);
+    test_and_clear_page_young(page);
+    if (!isolate_lru_page(page))
+      list_add(&page->lru, &page_list);
+  }
+  nr_reclaimed = reclaim_pages(&page_list);
+
+  return nr_reclaimed;
+}
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index ee8c32dec..d44644f46 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1365,4 +1365,5 @@ int __sys_getsockopt(int fd, int level, int optname, char __user *optval,
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
 asmlinkage long sys_ballooning(void);
+asmlinkage long sys_bswap(void * args, unsigned int nr_args);
 #endif
-- 
2.25.1

